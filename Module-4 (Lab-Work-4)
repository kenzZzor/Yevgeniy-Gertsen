// Произведите корректную (правильную) по вашему мнению реализацию с применением принципа Dependency-Inversion Principle, DIP

public interface INotificationService
{
    void SendNotification(string message);
}



public class EmailService : INotificationService
{
    public void SendNotification(string message)
    {
        Console.WriteLine($"Отправка Email: {message}");
    }
}



public class SmsService : INotificationService
{
    public void SendNotification(string message)
    {
        Console.WriteLine($"Отправка SMS: {message}");
    }
}



public class Notification
{
    private readonly INotificationService _notificationService;

    public Notification(INotificationService notificationService)
    {
        _notificationService = notificationService;
    }

    public void Send(string message)
    {
        _notificationService.SendNotification(message);
    }
}




class Program
{
    static void Main(string[] args)
    {
        // Используем EmailService
        INotificationService emailService = new EmailService();
        Notification emailNotification = new Notification(emailService);
        emailNotification.Send("Привет, это тестовое сообщение по Email!");

        // Используем SmsService
        INotificationService smsService = new SmsService();
        Notification smsNotification = new Notification(smsService);
        smsNotification.Send("Привет, это тестовое сообщение по SMS!");
    }
}
